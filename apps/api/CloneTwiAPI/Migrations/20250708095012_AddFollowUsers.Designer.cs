// <auto-generated />
using System;
using CloneTwiAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloneTwiAPI.Migrations
{
    [DbContext(typeof(CloneTwiContext))]
    [Migration("20250708095012_AddFollowUsers")]
    partial class AddFollowUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloneTwiAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.AudioMessage", b =>
                {
                    b.Property<int>("AudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AudioId"));

                    b.Property<string>("AudioFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AudioMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Audio_MessageId");

                    b.HasKey("AudioId")
                        .HasName("PK__AudioMes__A28A945054A6EAAE");

                    b.HasIndex("AudioMessageId");

                    b.ToTable("AudioMessage", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Bookmark", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookmarkId"));

                    b.Property<int>("BookmarkMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Bookmark_MessageId");

                    b.Property<string>("BookmarkUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Bookmark_UserId");

                    b.HasKey("BookmarkId")
                        .HasName("PK__Bookmark__541A3B714D2C4593");

                    b.HasIndex("BookmarkMessageId");

                    b.HasIndex(new[] { "BookmarkUserId", "BookmarkMessageId" }, "UQ__Bookmark__C997EFB2805DBA76")
                        .IsUnique();

                    b.ToTable("Bookmark", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.EmojiMessage", b =>
                {
                    b.Property<int>("EmojiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmojiId"));

                    b.Property<int>("EmojiMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Emoji_MessageId");

                    b.Property<string>("EmojiValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_100_CI_AI_SC_UTF8");

                    b.HasKey("EmojiId")
                        .HasName("PK__EmojiMes__D584B2331210B021");

                    b.HasIndex("EmojiMessageId");

                    b.ToTable("EmojiMessage", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.FollowUser", b =>
                {
                    b.Property<int>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowId"));

                    b.Property<string>("FollowerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FollowId")
                        .HasName("PK__FollowUs__2CE810AE6B0CE6C7");

                    b.HasIndex("FollowerUserId");

                    b.HasIndex("FollowingUserId");

                    b.ToTable("FollowUser", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<bool?>("MessageIsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MessageParentId")
                        .HasColumnType("int")
                        .HasColumnName("Message_ParentId");

                    b.Property<int?>("MessagePreviousVersionId")
                        .HasColumnType("int")
                        .HasColumnName("Message_PreviousVersionId");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Message_UserId");

                    b.HasKey("MessageId")
                        .HasName("PK__Message__C87C0C9C29E64AE8");

                    b.HasIndex("MessageParentId");

                    b.HasIndex("MessagePreviousVersionId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Repost", b =>
                {
                    b.Property<int>("RepostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepostId"));

                    b.Property<int>("RepostMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Repost_MessageId");

                    b.Property<string>("RepostUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Repost_UserId");

                    b.HasKey("RepostId")
                        .HasName("PK__Repost__5E7F921E2A5B4E12");

                    b.HasIndex("RepostMessageId");

                    b.HasIndex(new[] { "RepostUserId", "RepostMessageId" }, "UQ__Repost__0E305DA4A1F284DD")
                        .IsUnique();

                    b.ToTable("Repost", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.ThemeMessage", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<int>("ThemeMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Theme_MessageId");

                    b.Property<string>("ThemeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ThemeId")
                        .HasName("PK__ThemeMes__FBB3E4D9E8247617");

                    b.HasIndex("ThemeMessageId");

                    b.ToTable("ThemeMessage", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.VideoMessage", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<string>("VideoFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Video_MessageId");

                    b.Property<string>("VideoPreview")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoId")
                        .HasName("PK__VideoMes__BAE5126A7392D3BC");

                    b.HasIndex("VideoMessageId");

                    b.ToTable("VideoMessage", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.View", b =>
                {
                    b.Property<int>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewId"));

                    b.Property<int>("ViewMessageId")
                        .HasColumnType("int")
                        .HasColumnName("View_MessageId");

                    b.Property<string>("ViewUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("View_UserId");

                    b.HasKey("ViewId")
                        .HasName("PK__View__1E371CF61A783FC4");

                    b.HasIndex("ViewMessageId");

                    b.ToTable("View", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CloneTwiAPI.Models.ApplicationUser", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", null)
                        .WithMany("ExtraUser")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.AudioMessage", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "AudioMessageNavigation")
                        .WithMany("AudioMessages")
                        .HasForeignKey("AudioMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Audio_Message");

                    b.Navigation("AudioMessageNavigation");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Bookmark", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "BookmarkMessage")
                        .WithMany("Bookmarks")
                        .HasForeignKey("BookmarkMessageId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookmark_Message");

                    b.Navigation("BookmarkMessage");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.EmojiMessage", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "EmojiMessageNavigation")
                        .WithMany("EmojiMessages")
                        .HasForeignKey("EmojiMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emoji_Message");

                    b.Navigation("EmojiMessageNavigation");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.FollowUser", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", "Following")
                        .WithMany("Follower")
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Message", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "MessageParent")
                        .WithMany("InverseMessageParent")
                        .HasForeignKey("MessageParentId")
                        .HasConstraintName("FK_Message_Parent");

                    b.HasOne("CloneTwiAPI.Models.Message", "MessagePreviousVersion")
                        .WithMany("InverseMessagePreviousVersion")
                        .HasForeignKey("MessagePreviousVersionId")
                        .HasConstraintName("FK_Message_PreviousVersion");

                    b.Navigation("MessageParent");

                    b.Navigation("MessagePreviousVersion");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Repost", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "RepostMessage")
                        .WithMany("Reposts")
                        .HasForeignKey("RepostMessageId")
                        .IsRequired()
                        .HasConstraintName("FK_Repost_Message");

                    b.Navigation("RepostMessage");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.ThemeMessage", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "ThemeMessageNavigation")
                        .WithMany("ThemeMessages")
                        .HasForeignKey("ThemeMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Theme_Message");

                    b.Navigation("ThemeMessageNavigation");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.VideoMessage", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "VideoMessageNavigation")
                        .WithMany("VideoMessages")
                        .HasForeignKey("VideoMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Video_Message");

                    b.Navigation("VideoMessageNavigation");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.View", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.Message", "ViewMessage")
                        .WithMany("Views")
                        .HasForeignKey("ViewMessageId")
                        .IsRequired()
                        .HasConstraintName("FK_View_Message");

                    b.Navigation("ViewMessage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CloneTwiAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloneTwiAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("ExtraUser");

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("CloneTwiAPI.Models.Message", b =>
                {
                    b.Navigation("AudioMessages");

                    b.Navigation("Bookmarks");

                    b.Navigation("EmojiMessages");

                    b.Navigation("InverseMessageParent");

                    b.Navigation("InverseMessagePreviousVersion");

                    b.Navigation("Reposts");

                    b.Navigation("ThemeMessages");

                    b.Navigation("VideoMessages");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
